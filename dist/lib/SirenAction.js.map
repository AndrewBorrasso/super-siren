{"version":3,"sources":["lib/SirenAction.js"],"names":[],"mappings":"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","file":"lib/SirenAction.js","sourcesContent":["import _ from 'lodash';\nimport Immutable from 'immutable';\nimport ActionField from './ActionField';\nimport Client from './Client';\nimport SirenHelpers from './SirenHelpers';\n\n/**\n * Representation of a Siren action, which allows a state within a Siren Hypermedia API\n * to transition to a new state.\n *\n * @param {String} options.name:   null                                [description]\n * @param {String} options.title:  null                                [description]\n * @param {String} options.method: 'GET'                               [description]\n * @param {String} options.href:   null                                [description]\n * @param {String} options.type:   'application/x-www-form-urlencoded' [description]\n * @param {Immutable.Map} options.fields: new Immutable.Map()          [description]\n */\nclass SirenAction extends Immutable.Record({\n\tname: null,\n\ttitle: null,\n\tmethod: 'GET',\n\thref: null,\n\tclasses: new Immutable.Set(),\n\ttype: 'application/x-www-form-urlencoded',\n\tfields: new Immutable.Map()\n}) {\n\t/**\n\t * Performs the action specified by this Action.\n\t *\n\t * @param  {Object=} data                          Query params sent as part of this action\n\t * @return {superagent-promise} Superagent Promise HTTP request to perform this action\n\t */\n\tperform(data) {\n\t\tdata = data || {};\n\n\t\tconst req = Client.action(this.method, this.href);\n\n\t\tif (this.type && this.type !== 'multipart/form-data') {\n\t\t\t//superagent needs to set it's own type for multipart/form-data content\n\t\t\treq.type(this.type);\n\t\t}\n\n\t\tconst payload = {};\n\n\t\tthis.fields.forEach(f => { if(f.value) payload[f.name] = f.value });\n\t\tImmutable.fromJS(data).forEach((value, key) => payload[key] = value);\n\n\t\tif (this.method.toLowerCase() === 'get') {\n\t\t\treq.query(payload);\n\t\t}\n\t\telse {\n\t\t\tif (this.type === 'multipart/form-data') {\n\t\t\t\tconst formData = new FormData();\n\n\t\t\t\tfor (let key in payload) {\n\t\t\t\t\tformData.append(key, payload[key]);\n\t\t\t\t}\n\n\t\t\t\treq.send(formData);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treq.send(payload);\n\t\t\t}\n\t\t}\n\n\t\treturn req;\n\t}\n\n\t/**\n\t * Creates a SirenAction instance based on the provided\n\t * JSON object structure.\n\t *\n\t * @param  {Object} json      Object which matches the Siren JSON structure.\n\t * @param  {String} [baseUrl] optional url to use as the base URL for all parsed URLs\n\t * @return {SirenAction}      Result of parsing the provided JSON object.\n\t */\n\tstatic fromJson(json, baseUrl) {\n\t\tif (!json.name) {\n\t\t\tthrow new Error('\"name\" is requires on an action');\n\t\t}\n\n\t\treturn empty.withMutations(map => {\n\t\t\tmap.set('name', json.name || map.name);\n\t\t\tmap.set('title', json.title || map.title);\n\t\t\tmap.set('method', json.method || map.method);\n\t\t\tmap.set('href', SirenHelpers.processUrl(json.href || map.href, baseUrl));\n\t\t\tmap.set('classes', new Immutable.Set(json.class || []));\n\t\t\tmap.set('type', json.type || map.type);\n\t\t\tmap.set('fields', new Immutable.Map(_\n\t\t\t\t.map(json.fields || [], f => ActionField.fromJson(f))\n\t\t\t\t.map(af => [af.name, af]))\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Default state for a SirenAction.  This has the defaults set and nothing\n\t * else.\n\t *\n\t * @return {SirenAction} Siren Action which is created as a result of parsing\n\t *                             the provided JSON.\n\t */\n\tstatic get empty() {\n\t\treturn empty;\n\t}\n}\n\nconst empty = new SirenAction();\n\nexport default SirenAction;\n"],"sourceRoot":"/source/"}