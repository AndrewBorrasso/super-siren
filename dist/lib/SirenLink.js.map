{"version":3,"sources":["lib/SirenLink.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;yBAAsB,WAAW;;;;sBACd,UAAU;;;;;;;;;;;IAQvB,SAAS;WAAT,SAAS;;;;;;;;;;;;AAiBH,UAjBN,SAAS,CAiBF,IAAI,EAAE,IAAI,EAAgB;MAAd,OAAO,yDAAG,EAAE;;wBAjB/B,SAAS;;AAkBb,6BAlBI,SAAS,6CAkBP,EAAC,IAAI,EAAE,IAAI,uBAAU,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,uBAAU,GAAG,CAAC,OAAO,CAAC,EAAC,EAAE;EACxF;;;;;;;;cAnBI,SAAS;;SA0BR,kBAAG;AACR,UAAO,oBAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAC7B;;;QA5BI,SAAS;GAAS,uBAAU,MAAM,CAAC;;;;AAIxC,KAAI,EAAE,IAAI,uBAAU,GAAG,EAAE;AACzB,QAAO,EAAE,IAAI,uBAAU,GAAG,EAAE;AAC5B,KAAI,EAAE,IAAI;CACV,CAAC;;qBAwBa,SAAS","file":"lib/SirenLink.js","sourcesContent":["import Immutable from 'immutable';\nimport Client from './Client';\n\n/**\n * Siren link used to describe navigation through a siren entity graph.\n *\n * @property {Immutable.Set} rels - set of all rels which describe this link.\n * @property {String} href URL - that this link refers to.\n */\nclass SirenLink extends Immutable.Record({\n\t/**\n\t * @member {Immutable.Set}\n\t */\n\trels: new Immutable.Set(),\n\tclasses: new Immutable.Set(),\n\thref: null\n}) {\n\t/**\n\t * Constructs a new SirenLink based on the provided rels and href values.\n\t *\n\t * @param  {Array.<String>} rels - array of rel values for this link\n\t * @param  {String} href - URL that this link refers to.\n\t * @param   {Array.<String>} classes - Array of optional class names\n\t *\n\t * @return {SirenLink} Constructed SirenLink instance.\n\t */\n\tconstructor(rels, href, classes = []) {\n\t\tsuper({rels: new Immutable.Set(rels), href: href, classes: new Immutable.Set(classes)});\n\t}\n\n\t/**\n\t * Perhaps an HTTP Get against the href represented by this Link.\n\t *\n\t * @return {superagent-promise} superagent request as a with a promise wrapper\n\t */\n\tfollow() {\n\t\treturn Client.get(this.href);\n\t}\n}\n\nexport default SirenLink;\n"],"sourceRoot":"/source/"}