{"version":3,"sources":["lib/Siren.js"],"names":[],"mappings":"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","file":"lib/Siren.js","sourcesContent":["import Promise from 'bluebird';\nimport Immutable from 'immutable';\nimport LinkedSubEntity from './LinkedSubEntity';\nimport SirenLink from './SirenLink';\nimport SirenAction from './SirenAction';\nimport _ from 'lodash';\nimport Client from './Client';\nimport SirenHelpers from './SirenHelpers';\n\nClient.addParser('application/vnd.siren+json', (text, requestUrl) => Siren.fromJson(JSON.parse(text), requestUrl));\n\nClient.addHeader('Accept', 'application/vnd.siren+json');\n\nconst client = new Client();\n\n/**\n * @class Siren\n * Immutable Siren entity.  This is the main entrypoint for all Siren operations.\n */\nclass Siren extends Immutable.Record({\n\tclasses: Immutable.Set(),\n\tproperties: Immutable.Map(),\n\tentities: Immutable.List(),\n\tactions: Immutable.Map(),\n\tlinks: Immutable.List()\n}) {\n\tconstructor(args) {\n\t\tif (!args && Siren.empty) {\n\t\t\treturn Siren.empty;\n\t\t}\n\t\telse {\n\t\t\tsuper(args);\n\t\t}\n\t}\n\n\t/**\n\t * Finds the @see {@link SirenAction} referenced by the provided rel.\n\t *\n\t * @param  {String} name The name of the action to find.\n\t * @return {SirenAction} SirenAction matching the requested name.  null if none is found.\n\t */\n\tfindActionByName(name) {\n\t\treturn this.actions.get(name) || null;\n\t}\n\n\t/**\n\t * Finds the first @See {@link SirenLink} referenced by the provided rel.\n\t *\n\t * @param  {String} rel The relation to this Siren entity for the requested link.\n\t * @return {SirenLink}     SirenLink matching the requested rel.  null if none is found.\n\t */\n\tfindLinkByRel(rel) {\n\t\treturn this.links.filter(link => link.rels.contains(rel)).first() || null;\n\t}\n\n\t/**\n\t * Finds the @See {@link EmbeddedSubEntity}|{@link LinkedSubEntity} entities referenced by the provided rel.\n\t *\n\t * @param  {String} rel The relation to this Siren entity for the requested sub-entity.\n\t * @return {Immutable.List}  List of sub-entities matching the requested rel.\n\t */\n\tfindEntitiesByRel(rel) {\n\t\treturn this.entities.filter(item => item.rels.contains(rel));\n\t}\n\n\t/**\n\t * Returns the sub-entities on this Siren object which are embedded sub-entities.\n\t *\n\t * @return {Immutable.List}     List of embedded sub-entities.\n\t */\n\tget embeddedEntities() {\n\t\treturn this.entities\n\t\t\t.filter(item => item instanceof EmbeddedSubEntity)\n\t\t\t.toSet();\n\t}\n\n\t/**\n\t * Returns the sub-entities on this Siren object which are embedded sub-entities.\n\t *\n\t * @param  {String} rel \tOnly entities with a relation to the parent siren matching this should be returned.\n\t * @return {Immutable.List}  List of embedded sub-entities which match thes provided rel.\n\t */\n\tembeddedEntitiesByRel(rel) {\n\t\treturn this.embeddedEntities\n\t\t\t.filter(item => item.rels.contains(rel));\n\t}\n\n\t/**\n\t * Returns the sub-entities on the Siren object which are linked sub-entities.\n\t *\n\t * @return {Immutable.List}     List of linked sub-entities on this Siren object.\n\t */\n\tget linkedEntities() {\n\t\treturn this.entities\n\t\t\t.filter(item => item instanceof LinkedSubEntity)\n\t\t\t.toSet();\n\t}\n\n\t/**\n\t * Returns the set of linked sub-entities on the Siren object which match the requested rel.\n\t *\n\t * @param  {String} rel     Only entities with this relation to the parent siren should be returned.\n\t * @return {Immutable.List}  List of linked sub-entities which match the provided rel.\n\t */\n\tlinkedEntitiesByRel(rel) {\n\t\treturn this.linkedEntities\n\t\t\t.filter(item => item.rels.contains(rel));\n\t}\n\n\t/**\n\t * Returns the self link for this entity\n\t *\n\t * @return {SirenLink} link represented by the self rel, null if no self link is found.\n\t */\n\tget selfLink() {\n\t\treturn this.findLinkByRel('self');\n\t}\n\n\t//TODO: add a validate method and use it while parsing\n\t/**\n\t * Parses a JSON representation of a Siren entity\n\t * and returns the Siren representation.\n\t * @param {Object} [obj] The JSON object to be parsed as Siren\n\t * @param {String} [baseUrl=null] Optional base URL to use for relative URL parsing\n\t * @return {Siren} Parsed Siren entity\n\t */\n\tstatic fromJson(obj, baseUrl = null) {\n\t\treturn Siren.empty.withMutations(map => {\n\t\t\tmap.set('classes', map.classes.union(obj.class ? Immutable.fromJS(obj.class) : new Immutable.List()));\n\n\t\t\tfor (let key in obj.properties) {\n\t\t\t\tmap.set('properties', map.properties.set(key, obj.properties[key]));\n\t\t\t}\n\n\t\t\tmap.set('links',\n\t\t\t\tnew Immutable.List(\n\t\t\t\t\t_.map(obj.links || [], (item) => new SirenLink(item.rel, SirenHelpers.processUrl(item.href, baseUrl), item.class))\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tmap.set('actions',\n\t\t\t\tnew Immutable.Map(\n\t\t\t\t\t_.map(obj.actions || [], (item) => SirenAction.fromJson(item, baseUrl))\n\t\t\t\t\t.map(action => [action.name, action])\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tmap.set('entities',\n\t\t\t\tnew Immutable.List(\n\t\t\t\t\t_.map(obj.entities || [], (item) => item.href ? LinkedSubEntity.fromJson(item, baseUrl) : EmbeddedSubEntity.fromJson(item, baseUrl))\n\t\t\t\t)\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Returns an empty siren representation.  This Siren entity\n\t * contains no afforances.\n\t * @return {Siren} Empty siren structure\n\t */\n\tstatic get empty() {\n\t\treturn emptySiren;\n\t}\n\n\t/**\n\t * Returns a Superagent Promise instance which will perform an HTTP Get against\n\t * the provided href returning the response as a SuperAgent response.\n\t * If the response is Siren ('application/vnd.siren+json'),\n\t * then the body should be a Siren instance.\n\t *\n\t * @param {String} href The URL to perform an HTTP get against\n\t * @return {superagent-promise} Superagent Promise Object\n\t */\n\tstatic get(href) {\n\t\treturn Client.get(href);\n\t}\n}\n\nconst emptySiren = new Siren();\n\n/**\n * @class EmbeddedSubEntity\n * Entity which has been embedded within a parent Siren instance.\n *\n * @param {Array} options.rels: new Immutable.Set() array of strings to identify how this\n *                              embedded entity is related to it's parent.\n * @param {Object} options.entity: Siren.empty embedded entity instance\n */\nclass EmbeddedSubEntity extends Immutable.Record({\n\trels: new Immutable.Set(),\n\tentity: Siren.empty\n}) {\n\t/**\n\t * Parses the provided JSON representation of the Siren sub entity\n\t * into an instance of an EmbeddedSubEntity.\n\t *\n\t * @param  {Object} json           The JSON representation of a siren embedded sub entity\n\t * @param  {String} [baseUrl=null] Optional base URL to use in case URLs are relative URLs\n\t * @return {EmbeddedSubEntity}     The representation of the parsed JSON\n\t */\n\tstatic fromJson(json, baseUrl=null) {\n\t\tif (!json.rel || !_.isArray(json.rel) || json.rel.length === 0) {\n\t\t\tthrow new Error('A rel array is required to parse an embedded sub entity');\n\t\t}\n\n\t\treturn EmbeddedSubEntity.empty.withMutations(map => {\n\t\t\tmap.set('rels', new Immutable.Set(json.rel));\n\t\t\tmap.set('entity', Siren.fromJson(json, baseUrl));\n\t\t});\n\t}\n\n\t/**\n\t * Returns the default empty instance of an EmbeddedSubEntity.\n\t *\n\t * @return {EmbeddedSubEntity} default embedded sub entity\n\t */\n\tstatic get empty() {\n\t\treturn emptyEmbedded;\n\t}\n}\n\nconst emptyEmbedded = new EmbeddedSubEntity();\n\nSiren.Link = SirenLink;\nSiren.Action = SirenAction;\nSiren.LinkedSubEntity = LinkedSubEntity;\nSiren.EmbeddedSubEntity = EmbeddedSubEntity;\nSiren.Client = Client;\n\nSiren.Helper = SirenHelpers;\n\nexport default Siren;\n"],"sourceRoot":"/source/"}