{"version":3,"sources":["lib/Client.js"],"names":[],"mappings":"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","file":"lib/Client.js","sourcesContent":["import Immutable from 'immutable';\nimport superagent from 'superagent';\nimport bluebird from 'bluebird';\nimport Uri from 'urijs';\n\nconst request = require('superagent-promise')(superagent, bluebird);\n\nlet globalHeaders = new Immutable.Map();\n\n/**\n * HTTP client used by the Super-Siren library.  Library utilized [superaget](https://github.com/visionmedia/superagent)\n * for all requests.\n */\nclass Client {\n\t/**\n\t * Creates a superagent HTTP get operation\n\t *\n\t * @param {String} href The URL to perform an HTTP get against.\n\t * @return {superagent-promise} superagent get request\n\t */\n\tstatic get(href) {\n\t\tlet req = request.get(href);\n\t\taddHeaders(req);\n\n\t\treturn req;\n\t}\n\n\tstatic put(href) {\n\t\tlet req = request.put(href);\n\t\taddHeaders(req);\n\n\t\treturn req;\n\t}\n\n\tstatic post(href) {\n\t\tlet req = request.post(href);\n\t\taddHeaders(req);\n\n\t\treturn req;\n\t}\n\n\tstatic del(href) {\n\t\tlet req = request.del(href);\n\t\taddHeaders(req);\n\n\t\treturn req;\n\t}\n\n\tstatic action(method, href) {\n\t\tmethod = (method || 'get').toLowerCase();\n\n\t\tif (method === 'delete') {\n\t\t\tmethod = 'del';\n\t\t}\n\n\t\tlet req = request[method](href);\n\t\taddHeaders(req);\n\n\t\treturn req;\n\t}\n\n\t/**\n\t * Registers a content type parser with all client instances.\n\t *\n\t * @param {String} contentType     content-type which should be parsed with the provided function\n\t *                                 whenever a response is received with this content type.\n\t * @param {Function} parseFunction Function to call in order to return response body when response\n\t *                                 is encoded with the provided contentType.\n\t * @returns {undefined}\n\t */\n\tstatic addParser(contentType, parseFunction) {\n\t\tsuperagent.parse[contentType] = (res, done) => {\n\t\t\t//if res is a string, that means we're likely in a browser environment\n\t\t\t//and have only been provided the string to parse.\n\t\t\tif (typeof(res) === 'string') {\n\t\t\t\treturn parseFunction(res);\n\t\t\t}\n\n\t\t\t//if we made it this far it's likely Node and have to do more work to parse\n\n\t\t\t//TODO: cannot assume http\n\t\t\tlet baseUrl = null;\n\n\t\t\tif (res.req && res.req._headers && res.req._headers.host) {\n\t\t\t\tbaseUrl = new Uri({protocol: 'http', hostname: res.req._headers.host}).toString();\n\t\t\t\tbaseUrl = new Uri(res.req.path).absoluteTo(baseUrl).toString();\n\t\t\t}\n\n\t\t\tres.text = '';\n\t\t\tres.setEncoding('utf8');\n\t\t\tres.on('data', chunk => {res.text += chunk;});\n\t\t\tres.on('end', () => {\n\t\t\t\tlet err = null;\n\t\t\t\tlet body = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tlet text = res.text && res.text.replace(/^\\s*|\\s*$/g, '');\n\t\t\t\t\tbody = text && parseFunction(text, baseUrl);\n\t\t\t\t}\n\t\t\t\tcatch(e) {\n\t\t\t\t\terr = e;\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tdone(err, body);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t}\n\n\t/**\n\t * Returns a Map of current global headers that are added\n\t * for all clients.\n\t *\n\t * @return {Immutable.Map} Immutable map of all currently registered headers\n\t */\n\tstatic get globalHeaders() {\n\t\treturn globalHeaders;\n\t}\n\n\t/**\n\t * Registers a global header to be used by all client instances.\n\t *\n\t * @param {String} header The header attribute to set\n\t * @param {String} value The header value to set\n\t * @returns {undefined}\n\t */\n\tstatic addHeader(header, value) {\n\t\tglobalHeaders = globalHeaders.set(header, value);\n\t}\n\n\t/**\n\t * Remves a previously registered global header.\n\t *\n\t * @param  {String} header The header attribute to remove\n\t * @returns {undefined}\n\t */\n\tstatic removeHeader(header) {\n\t\tglobalHeaders = globalHeaders.delete(header);\n\t}\n}\n\nfunction addHeaders(req) {\n\tglobalHeaders.forEach((value, key) => {\n\t\treq.set(key, value);\n\t});\n}\n\nexport default Client;\n"],"sourceRoot":"/source/"}