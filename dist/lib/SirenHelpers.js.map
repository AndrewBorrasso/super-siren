{"version":3,"sources":["lib/SirenHelpers.js"],"names":[],"mappings":";;;;;;;;sBAAmB,UAAU;;;;qBACb,OAAO;;;;;;;;;;AAQvB,SAAS,MAAM,CAAC,GAAG,EAAE;AACpB,QAAO,UAAC,GAAG,EAAK;AACf,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IACpC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI;UAAI,IAAI,CAAC,IAAI;GAAA,CAAC,CAAC,KAAK,EAAE,IAChE,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI;UAAI,IAAI,CAAC,MAAM,CAAC,QAAQ;GAAA,CAAC,CAAC,KAAK,EAAE,CAAC;;AAElF,MAAI,CAAC,IAAI,EAAE;AACV,SAAM,IAAI,KAAK,CAAC,gCAAgC,EAAE,EAAC,GAAG,EAAH,GAAG,EAAC,CAAC,CAAC;GACzD;;AAED,SAAO,OAAO,IAAI,KAAK,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;EAClE,CAAC;CACF;;;;;;;;;AASD,SAAS,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE;AAClC,QAAO,UAAC,GAAG,EAAK;AACf,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;;AAE/C,MAAI,CAAC,MAAM,EAAE;AACZ,SAAM,IAAI,KAAK,CAAC,uCAAuC,EAAE,EAAC,IAAI,EAAJ,IAAI,EAAC,CAAC,CAAC;GACjE;;AAED,SAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;EAC5B,CAAC;CACF;;;;;;;;;;AAUD,SAAS,UAAU,CAAC,GAAG,EAAE,OAAO,EAAE;AACjC,KAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;AAC1B,MAAI,GAAG,GAAG,uBAAQ,GAAG,CAAC,CAAC;;AAEvB,MAAI,OAAO,EAAE;AACZ,MAAG,GAAG,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;GAC9B;;AAED,SAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;EACtB;;AAED,QAAO,IAAI,CAAC;CACZ;;qBAEc;AACd,OAAM,EAAN,MAAM;AACN,cAAa,EAAb,aAAa;AACb,WAAU,EAAV,UAAU;CACV","file":"lib/SirenHelpers.js","sourcesContent":["import Client from './Client';\nimport Uri from 'urijs';\n\n/**\n * Follows the Siren model's link by the provided rel.\n *\n * @param  {String} rel  how the requested link is related to the result siren we are following.\n * @return {Promise}     Promise which resolves to a superagent response\n */\nfunction follow(rel) {\n\treturn (res) => {\n\t\tconst link = res.body.findLinkByRel(rel)\n\t\t\t|| res.body.linkedEntitiesByRel(rel).map(item => item.href).first()\n\t\t\t|| res.body.embeddedEntitiesByRel(rel).map(item => item.entity.selfLink).first();\n\n\t\tif (!link) {\n\t\t\tthrow new Error('No link found for provided rel', {rel});\n\t\t}\n\n\t\treturn typeof link === 'string' ? Siren.get(link) : link.follow();\n\t};\n}\n\n/**\n * Performs the action identified by the provided actionName using the provided data.\n *\n * @param  {String} name       The name that identifies the action to take\n * @param  {Object=} data      The data to send on the action\n * @return {Promise}           Promise which resolves to a superagent response\n */\nfunction performAction(name, data) {\n\treturn (res) => {\n\t\tconst action = res.body.findActionByName(name);\n\n\t\tif (!action) {\n\t\t\tthrow new Error('No action found for the provided name', {name});\n\t\t}\n\n\t\treturn action.perform(data);\n\t};\n}\n\n/**\n * Processes the provided url and computes the absolute URL provided\n * the url and optional baseUrl.\n *\n * @param  {String} url          The URL to process\n * @param  {String} [baseUrl]    Optional base URL to compute the absolute URL relative to.\n * @return {String}              Absolute URL\n */\nfunction processUrl(url, baseUrl) {\n\tif (url && url.length > 0) {\n\t\tlet uri = new Uri(url);\n\n\t\tif (baseUrl) {\n\t\t\turi = uri.absoluteTo(baseUrl);\n\t\t}\n\n\t\treturn uri.toString();\n\t}\n\n\treturn null;\n}\n\nexport default {\n\tfollow,\n\tperformAction,\n\tprocessUrl\n};\n"],"sourceRoot":"/source/"}